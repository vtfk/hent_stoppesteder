# -*- coding: utf-8 -*-
"""
/***************************************************************************
 loadStopPlacesBuss
                                 A QGIS plugin
 Henter stoppesteder i vestfold og telemark, bus.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-09-22
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Vestfold og Telemark Fylkeskommune, ved Robin Ellingsen
        email                : robin.ellingsen@vtfk.no
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from qgis.core import QgsVectorLayer, QgsProject
# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .Hent_Stoppesteder_dialog import loadStopPlacesBussDialog
import os.path
import csv
import os
import pandas as pd
import requests
import zipfile
import io
import time
from os import path


file = ('results_stops_vtfk.csv')


class loadStopPlacesBuss:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'loadStopPlacesBuss_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Hent Stoppesteder')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('loadStopPlacesBuss', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/Hent Stoppesteder/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Hent Stoppesteder'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Hent Stoppesteder'),
                action)
            self.iface.removeToolBarIcon(action)


    def get_files(self):
        url_telemark = 'https://storage.googleapis.com/marduk-production/outbound/gtfs/rb_tel-aggregated-gtfs.zip'
        url_vestfold = 'https://storage.googleapis.com/marduk-production/outbound/gtfs/rb_vkt-aggregated-gtfs.zip'
        request_telemark = requests.get(url_telemark, allow_redirects=True)
        request_vestfold = requests.get(url_vestfold, allow_redirects=True)

        telemark_data_zip = zipfile.ZipFile(io.BytesIO(request_telemark.content))
        telemark_data_zip_namelist = telemark_data_zip.namelist()
        vestfold_data_zip = zipfile.ZipFile(io.BytesIO(request_vestfold.content))
        vestfold_data_zip_namelist = vestfold_data_zip.namelist()

        file_telemark, file_vestfold = './filer/telemark/stops.txt', './filer/vestfold/stops.txt'
        if path.isfile(file_telemark) and path.isfile(file_vestfold):
            os.remove(file_telemark)
            os.remove(file_vestfold)

            for name in telemark_data_zip_namelist:
                if name == 'stops.txt':
                    telemark_data_zip.extract('stops.txt', './filer/telemark')
                else:
                    pass

            for name in vestfold_data_zip_namelist:
                if name == 'stops.txt':
                    vestfold_data_zip.extract('stops.txt', './filer/vestfold')
                else:
                    pass
            print("Sletter gamle filer og laster ned nye")
        else:
            for name in telemark_data_zip_namelist:
                if name == 'stops.txt':
                    telemark_data_zip.extract('stops.txt', './filer/telemark')
                else:
                    pass

            for name in vestfold_data_zip_namelist:
                if name == 'stops.txt':
                    vestfold_data_zip.extract('stops.txt', './filer/vestfold')
                else:
                    pass
            print("Det finnes ingen filer, laster ned filene")

    def combine_files(self):
        with open('./filer/telemark/stops.txt', 'r') as ftlm:
            data_tlm = ftlm.read().splitlines(True)
        with open('./filer/telemark/stops.txt', 'w') as ftl:
            ftl.writelines(data_tlm[1:])
        with open('./filer/telemark/stops.txt', 'r') as ft:
            data_removed_header = ft.read()
        with open('./filer/vestfold/stops.txt', 'r') as fvkt:
            data_vkt = fvkt.read()

        data_vkt += "\n"
        data_vkt += data_removed_header

        with open(file, 'w') as fr:
            fr.write(data_vkt)

    def remove_vehicle_type(self):
        lines = list()
        with open(file, 'r') as f:
            reader = csv.reader(f)
            for row in reader:
                lines.append(row)
                for field in row:
                    if field == "1000":  # 1000 = b√•t
                        lines.remove(row)
        with open(file, 'w') as wf:
            writer = csv.writer(wf)
            writer.writerows(lines)

    def remove_stopPlace(self):
        df = pd.read_csv(file)
        stopPlace_removed = df[~df['stop_id'].astype(str).str.startswith(
            'NSR:StopPlace:')]  # 'NSR:StopPlace:' er et felles punkt der det finnest 2 eller flere stoppesteder.
        stopPlace_removed.to_csv(file, encoding='utf-8', index=False)

    def load_csv_to_qgis(self):
        file_to_qgis = "file:///{}{}{}?delimiter={}&xField={}&yField={}".\
            format(os.getcwd(), "/", file, ",", "stop_lon", "stop_lat")
        layer_stoppesteder = QgsVectorLayer(file_to_qgis, "vtfk-stoppesteder", "delimitedtext")
        if not layer_stoppesteder.isValid():
            print("Laget er ikke gyldig.")
        else:
            QgsProject.instance().addMapLayer(layer_stoppesteder)
            print("Laget er lastet inn. Husk √• legge til OpenStreetMap.")
        #TODO Automatisk legge til OpenStreetMap?

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = loadStopPlacesBussDialog()

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            self.get_files()
            self.combine_files()
            self.remove_vehicle_type()
            self.remove_stopPlace()
            self.load_csv_to_qgis()
